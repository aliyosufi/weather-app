{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","location","setLocation","useState","lat","lon","weather","setWeather","city","setCity","API_KEY","process","translationTable","استان","شهر","آفتابی","ابری","بارانی","برفی","مه","طوفانی","translateToDari","text","Object","keys","forEach","key","replace","RegExp","useEffect","navigator","geolocation","getCurrentPosition","pos","latitude","longitude","coords","fetchWeatherByLocation","fetch","then","res","json","data","cod","alert","catch","error","fetchWeatherByCity","coord","React","createElement","className","getBackgroundClass","main","toLowerCase","style","marginBottom","type","placeholder","value","onChange","e","target","onKeyDown","padding","fontSize","borderRadius","width","onClick","marginLeft","cursor","name","src","icon","alt","temp","description","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.855a4a5f.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './App.css'; // اضافه کردن فایل CSS\n\nfunction App() {\n  const [location, setLocation] = useState({ lat: null, lon: null });\n  const [weather, setWeather] = useState(null);\n  const [city, setCity] = useState('');\n\n  // دریافت API Key از متغیر محیطی\n  const API_KEY = process.env.REACT_APP_WEATHER_API_KEY;\n\n  // جدول ترجمه فارسی به فارسی دری\n  const translationTable = {\n    \"استان\": \"ولایت\",\n    \"شهر\": \"شهر\",\n    \"آفتابی\": \"آفتابی\",\n    \"ابری\": \"ابری\",\n    \"بارانی\": \"بارانی\",\n    \"برفی\": \"برفی\",\n    \"مه\": \"مه\",\n    \"طوفانی\": \"طوفانی\",\n  };\n\n  // تابع ترجمه\n  const translateToDari = (text) => {\n    if (!text) return text;\n\n    // جایگزینی کلمات با استفاده از جدول ترجمه\n    Object.keys(translationTable).forEach((key) => {\n      text = text.replace(new RegExp(key, \"g\"), translationTable[key]);\n    });\n\n    return text;\n  };\n\n  // دریافت آب‌وهوا بر اساس مختصات جغرافیایی\n  const fetchWeatherByLocation = (lat, lon) => {\n    if (!lat || !lon) return;\n\n    fetch(\n      `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${API_KEY}&units=metric&lang=fa`\n    )\n      .then((res) => res.json())\n      .then((data) => {\n        if (data.cod === 200) {\n          setWeather(data);\n        } else {\n          alert('خطا در دریافت اطلاعات آب‌وهوا!');\n        }\n      })\n      .catch(() => {\n        alert('خطا در دریافت اطلاعات آب‌وهوا.');\n      });\n  };\n\n  // گرفتن موقعیت مکانی کاربر\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (pos) => {\n          const { latitude, longitude } = pos.coords;\n          setLocation({ lat: latitude, lon: longitude });\n\n          // فراخوانی تابع برای دریافت اطلاعات آب‌وهوا بر اساس مختصات\n          fetchWeatherByLocation(latitude, longitude);\n        },\n        (error) => {\n          alert('دسترسی به موقعیت مکانی رد شد یا خطایی رخ داد.');\n        }\n      );\n    } else {\n      alert('مرورگر شما از موقعیت مکانی پشتیبانی نمی‌کند.');\n    }\n  }, []);\n\n  // دریافت آب‌وهوا بر اساس نام شهر\n  const fetchWeatherByCity = () => {\n    if (!city) return;\n\n    fetch(\n      `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric&lang=fa`\n    )\n      .then((res) => res.json())\n      .then((data) => {\n        if (data.cod === 200) {\n          setWeather(data);\n          setLocation({ lat: data.coord.lat, lon: data.coord.lon });\n        } else {\n          alert('شهر پیدا نشد!');\n        }\n      })\n      .catch(() => {\n        alert('خطا در دریافت اطلاعات شهر.');\n      });\n  };\n\n  // انتخاب کلاس CSS بر اساس وضعیت آب‌وهوا\n  const getBackgroundClass = () => {\n    if (!weather || !weather.weather) return 'default';\n\n    const main = weather.weather[0].main.toLowerCase();\n\n    switch (main) {\n      case 'clear':\n        return 'clear'; // آفتابی\n      case 'clouds':\n        return 'clouds'; // ابری\n      case 'rain':\n      case 'drizzle':\n        return 'rain'; // بارانی\n      case 'snow':\n        return 'snow'; // برفی\n      case 'fog':\n      case 'mist':\n        return 'fog'; // مه\n      case 'thunderstorm':\n        return 'thunderstorm'; // طوفانی\n      default:\n        return 'default'; // پیش‌فرض\n    }\n  };\n\n  return (\n    <div className={`app-container ${getBackgroundClass()}`}>\n      <h1>وضعیت آب‌و‌هوا ☀️🌧️</h1>\n\n      {/* بخش جستجوی شهر */}\n      <div style={{ marginBottom: 20 }}>\n        <input\n          type=\"text\"\n          placeholder=\"نام شهر را وارد کنید...\"\n          value={city}\n          onChange={(e) => setCity(e.target.value)}\n          onKeyDown={(e) => {\n            if (e.key === \"Enter\") {\n              fetchWeatherByCity();\n            }\n          }}\n          style={{\n            padding: '10px',\n            fontSize: '16px',\n            borderRadius: '5px',\n            width: '200px',\n          }}\n        />\n        <button\n          onClick={fetchWeatherByCity}\n          style={{\n            marginLeft: '10px',\n            padding: '10px 20px',\n            fontSize: '16px',\n            borderRadius: '5px',\n            cursor: 'pointer',\n          }}\n        >\n          جستجو\n        </button>\n      </div>\n\n      {/* اطلاعات هوا */}\n      {weather && weather.main && weather.weather ? (\n        <div>\n          <h2>{translateToDari(weather.name)}</h2>\n          <img\n            src={`https://openweathermap.org/img/wn/${weather.weather[0].icon}@2x.png`}\n            alt=\"وضعیت آسمان\"\n          />\n          <p>🌡️ دما: {weather.main.temp} درجه سانتی‌گراد</p>\n          <p>🌤️ آسمان: {translateToDari(weather.weather[0].description)}</p>\n        </div>\n      ) : (\n        location.lat && <p>در حال دریافت اطلاعات آب‌وهوا...</p>\n      )}\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}