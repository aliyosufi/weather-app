{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","location","setLocation","useState","lat","lon","weather","setWeather","city","setCity","API_KEY","process","useEffect","navigator","geolocation","getCurrentPosition","pos","latitude","longitude","coords","fetchWeatherByLocation","fetch","then","res","json","data","cod","alert","catch","error","React","createElement","style","textAlign","padding","fontFamily","minHeight","getBackgroundStyle","main","toLowerCase","background","color","marginBottom","type","placeholder","value","onChange","e","target","fontSize","borderRadius","width","onClick","fetchWeatherByCity","coord","marginLeft","cursor","name","src","icon","alt","temp","description","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.ee1a0edd.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\n\nfunction App() {\n  const [location, setLocation] = useState({ lat: null, lon: null });\n  const [weather, setWeather] = useState(null);\n  const [city, setCity] = useState('');\n\n  // دریافت API Key از متغیر محیطی\n  const API_KEY = process.env.REACT_APP_WEATHER_API_KEY;\n\n  // دریافت آب‌وهوا بر اساس مختصات جغرافیایی\n  const fetchWeatherByLocation = (lat, lon) => {\n    if (!lat || !lon) return;\n\n    fetch(\n      `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${API_KEY}&units=metric&lang=fa`\n    )\n      .then((res) => res.json())\n      .then((data) => {\n        if (data.cod === 200) {\n          setWeather(data);\n        } else {\n          alert('خطا در دریافت اطلاعات آب‌وهوا!');\n        }\n      })\n      .catch(() => {\n        alert('خطا در دریافت اطلاعات آب‌وهوا.');\n      });\n  };\n\n  // گرفتن موقعیت مکانی کاربر\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (pos) => {\n          const { latitude, longitude } = pos.coords;\n          setLocation({ lat: latitude, lon: longitude });\n\n          // فراخوانی تابع برای دریافت اطلاعات آب‌وهوا بر اساس مختصات\n          fetchWeatherByLocation(latitude, longitude);\n        },\n        (error) => {\n          alert('دسترسی به موقعیت مکانی رد شد یا خطایی رخ داد.');\n        }\n      );\n    } else {\n      alert('مرورگر شما از موقعیت مکانی پشتیبانی نمی‌کند.');\n    }\n  }, []);\n\n  // دریافت آب‌وهوا بر اساس نام شهر\n  const fetchWeatherByCity = () => {\n    if (!city) return;\n\n    fetch(\n      `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric&lang=fa`\n    )\n      .then((res) => res.json())\n      .then((data) => {\n        if (data.cod === 200) {\n          setWeather(data);\n          setLocation({ lat: data.coord.lat, lon: data.coord.lon });\n        } else {\n          alert('شهر پیدا نشد!');\n        }\n      })\n      .catch(() => {\n        alert('خطا در دریافت اطلاعات شهر.');\n      });\n  };\n\n  const getBackgroundStyle = () => {\n    if (!weather || !weather.weather) return {};\n\n    const main = weather.weather[0].main.toLowerCase();\n\n    switch (main) {\n      case 'clear':\n        return { background: 'linear-gradient(to top, #fceabb, #f8b500)', color: '#333' }; // آفتابی\n      case 'clouds':\n        return { background: 'linear-gradient(to top, #d7d2cc, #304352)', color: '#fff' }; // ابری\n      case 'rain':\n      case 'drizzle':\n        return { background: 'linear-gradient(to top, #4b79a1, #283e51)', color: '#fff' }; // بارانی\n      case 'snow':\n        return { background: 'linear-gradient(to top, #e6dada, #274046)', color: '#333' }; // برفی\n      case 'fog':\n      case 'mist':\n        return { background: 'linear-gradient(to top, #3e5151, #decba4)', color: '#333' }; // مه\n      case 'thunderstorm':\n        return { background: 'linear-gradient(to top, #141e30, #243b55)', color: '#fff' }; // طوفانی\n      default:\n        return { background: '#f0f0f0', color: '#333' }; // پیش‌فرض\n    }\n  };\n\n  return (\n    <div style={{\n      textAlign: 'center',\n      padding: 50,\n      fontFamily: 'Tahoma',\n      minHeight: '100vh',\n      ...getBackgroundStyle()\n    }}>\n      <h1>وضعیت آب‌و‌هوا ☀️🌧️</h1>\n\n      {/* بخش جستجوی شهر */}\n      <div style={{ marginBottom: 20 }}>\n        <input\n          type=\"text\"\n          placeholder=\"نام شهر را وارد کنید...\"\n          value={city}\n          onChange={(e) => setCity(e.target.value)}\n          style={{\n            padding: '10px',\n            fontSize: '16px',\n            borderRadius: '5px',\n            width: '200px',\n          }}\n        />\n        <button\n          onClick={fetchWeatherByCity}\n          style={{\n            marginLeft: '10px',\n            padding: '10px 20px',\n            fontSize: '16px',\n            borderRadius: '5px',\n            cursor: 'pointer',\n          }}\n        >\n          جستجو\n        </button>\n      </div>\n\n      {/* اطلاعات هوا */}\n      {weather && weather.main && weather.weather ? (\n        <div>\n          <h2>{weather.name}</h2>\n          <img\n            src={`https://openweathermap.org/img/wn/${weather.weather[0].icon}@2x.png`}\n            alt=\"وضعیت آسمان\"\n          />\n          <p>🌡️ دما: {weather.main.temp} درجه سانتی‌گراد</p>\n          <p>🌤️ آسمان: {weather.weather[0].description}</p>\n        </div>\n      ) : (\n        location.lat && <p>در حال دریافت اطلاعات آب‌وهوا...</p>\n      )}\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}